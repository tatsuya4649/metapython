Note of Python Metaclass
===

クラス生成の順番はclass ClassNameがClassName()によってインスタンス生成された場合、

1. ClassName.__new__が第一引数にClassName, 残りの引数に与えた引数が渡されて呼び出される。

2. __new__が定義されていない場合、親クラスをたどっていき最終的にobject.__new__が呼び出される。
    このobject.__new__が第一引数に与えたクラスのインスタンスを作成(実体としてメモリ上に作成)し、返される。

3. __new__がClassNameインスタンスを返した場合に限り、ClassName.__init__が呼び出される。

ex.

class A:
    def __new__(cls, arg):
        return int(arg)

a = A(10)
-> この場合、aにはint型の10が格納される。つまり、Aとはまったく関係のない型が生成されclass Aの__init__の呼び出しもない。

つまり、__new__にはインスタンスの設計方法が書いてあり)(ClassName()が呼び出されたときの)、__init__にはインスタンス化されたときの設計方法が書いてあるというイメージ。

What __metaclass__?
===

Pythonではclassを定義すると自動でtype('ClassName',...)が呼び出されてクラス生成が行われるのがデフォルトだが、クラス生成をするときに暗黙で呼び出される関数を置き換えることができる。

__metaclass__はそのための役割を持つ。クラス生成時に、クラス定義の中に__metaclass__が存在する場合、typeの代わりに定義した関数が呼び出される。

typeと同様の引数を受け取れるcallableなオブジェクトであればなんでも__metaclass__に設定できる。


Strong Point
===

Pythonの使用を自分自身で書き換えることも可能なほど、強力で柔軟な機能なため基底クラスなどでクラスを使い方を決める際には、とても役立つ機能。

Weak Point
===

コードリーディングの難易度が向上する。正しいコードを見つけられないと、なんでエラーが発生しているのか？文法上の誤りではないか？などと混乱の元になることも多い。



